//1. On Clause
//2. Catch clause with exception object
//3. catch clause with exception object and stacktrace object
//4. finally clause
//5. Custom Exception Handling



void main()
{
  print("CASE 1");
  //case1: when you know the exception to be thrown, use ON clause
  
  try{
  int result = 12 ~/ 3;
  print(result);
  } on IntegerDivisionByZeroException{
    print("cannot devide by zero");
  }
  
  print("");
  print("CASE 2");
  //case2: When you do not know the exception use CATCH clause
  
  try{
  int result = 12 ~/ 0;
  print(result);
  } catch(e){
    print(e);
  }
  
  print("");
  print("CASE 3");
  //case3: Using STACK TRACE to know the events occured before exception was thrown
  try{
  int result = 12 ~/ 0;
  print(result);
  } catch(e, s){
    print("The exception is $e");
    print("Stack Trace is $s");
  }
  
  
  print("");
  print("CASE 4");
  //case4: Whether there is an exception or not, FINALLY clause is always executed
  
  try{
  int result = 12 ~/ 0;
  print("result is $result");
  } catch(e){
    print("The Exception is $e");
  } 
  finally{
    print("This is finally clause and always gets executed");
  }
  
  
  print("");
  print("CASE 5");
  //case5: Custom Exception
  
  try{
    deposit(-200);
  } 
  catch(e){
    print(e.errormessage);
  }
}

class DepositException implements Exception{
  
  String errormessage()
  {
    return "You cannot enter amount less than zero";
  }

  void deposit(int amount){
    if (amount<0)
    {
      throw new DepositException();
    }
  }


}


                     
